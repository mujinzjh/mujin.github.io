<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浏览器画中画【学习笔记】</title>
      <link href="/2022/10/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%94%BB%E4%B8%AD%E7%94%BB%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/"/>
      <url>/2022/10/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%94%BB%E4%B8%AD%E7%94%BB%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="浏览器画中画（Picture-in-Picture）"><a href="#浏览器画中画（Picture-in-Picture）" class="headerlink" title="浏览器画中画（Picture-in-Picture）"></a>浏览器画中画（Picture-in-Picture）</h1><p>特别声明：本文是从MDN学习记录转载</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>浏览器画中画是指允许网站在其他窗口之上创建一个浮动的视频，以便用户在其他内容站点或者设备上的应用程序交互时可以继续播放媒体。</p></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="PictureInPictureWindow"><a href="#PictureInPictureWindow" class="headerlink" title="PictureInPictureWindow"></a>PictureInPictureWindow</h3><blockquote><p>表示浮动的视频窗口；包含width和height属性以及一个onresize的事件处理器属性</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>画中画API添加了HTMLVideoElement和Document接口的方法，以便允许来回切换浮动视频窗口</p></blockquote><h4 id="HTMLVideoElement接口的方法"><a href="#HTMLVideoElement接口的方法" class="headerlink" title="HTMLVideoElement接口的方法"></a>HTMLVideoElement接口的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">HTMLVideoElement</span>.<span class="title function_">requestPictureInPicture</span>()</span><br></pre></td></tr></table></figure><p>作用：请求用户代理将视频切换为画中画模式</p><h4 id="Document接口的方法"><a href="#Document接口的方法" class="headerlink" title="Document接口的方法"></a>Document接口的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">exitPictureInPicture</span>()</span><br></pre></td></tr></table></figure><p>作用：请求用户代理将元素由画中画模式切换到它原始盒子。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><blockquote><p>画中画API添加了HTMLVideoElement、Document和Shadow接口属性。这些属性用于决定浮动的视频窗口是否受支持和可用的，当前画中画是否处于激活状态并且哪个视频是浮动的。</p></blockquote><h4 id="HTMLVideoElement接口属性"><a href="#HTMLVideoElement接口属性" class="headerlink" title="HTMLVideoElement接口属性"></a>HTMLVideoElement接口属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">HTMLVideoElement</span>.<span class="property">autoPictureInPicture</span>;</span><br></pre></td></tr></table></figure><p>作用：当用户切换到标签页和应用程序时，<code>autoPictureInPicture</code>属性将自定进入或离开画中画模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">HTMLVideoElement</span>.<span class="property">disablePictureInPicture</span>;</span><br></pre></td></tr></table></figure><p>作用：<code>disablePictureInPicture</code>属性将指示用户代理是否应该向用户建议画中画的功能</p><h4 id="Document接口属性"><a href="#Document接口属性" class="headerlink" title="Document接口属性"></a>Document接口属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Document</span>.<span class="property">pictureInPictureEnabled</span>;</span><br></pre></td></tr></table></figure><p>作用：<code>pictureInPictureEnabled</code> 属性告诉你是否可以使用画中画模式。如果画中画模式因任何原因不可用（例如<code>&quot;画中画&quot;</code>功能不被接受，或者不支持画中画模式），则是 <code>false</code> 。</p><h4 id="Document或ShadowRoot接口属性"><a href="#Document或ShadowRoot接口属性" class="headerlink" title="Document或ShadowRoot接口属性"></a>Document或ShadowRoot接口属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Document</span>.<span class="property">pictureInPictureElement</span>/ <span class="title class_">ShadowRoot</span>.<span class="property">piptureInPictureElement</span>;</span><br></pre></td></tr></table></figure><p>作用：<code>pictureInPictureElement</code> 属性告诉你当前在浮动窗口（或影子 DOM）显示哪个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>Element</code></a>。如果为 <code>null</code>，则此文档（或影子 DOM）没有节点处于画中画模式。</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote><p>画中画API定义了三个事件，主要是用来检测画中画模式何时被切换或者浮动窗口的大小何时被调整</p></blockquote><h3 id="enterpictureinpicture"><a href="#enterpictureinpicture" class="headerlink" title="enterpictureinpicture"></a>enterpictureinpicture</h3><p>当HTMLVideoElement<code>进入画中画模式</code>时触发该事件。</p><h3 id="leavepictureinpicture"><a href="#leavepictureinpicture" class="headerlink" title="leavepictureinpicture"></a>leavepictureinpicture</h3><p>当HTMLVIdeoElement<code>离开画中画模式</code>时触发该事件</p><h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><p>当<code>PictureInPictureWindow大小改变</code>时触发该事件</p><h2 id="控制样式"><a href="#控制样式" class="headerlink" title="控制样式"></a>控制样式</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:picture-in-picture"><code>:picture-in-picture</code></a> 匹配当前进入画中画模式的视频元素，并允许你配置样式表，以便视频在画中画或者传统播放模式来回切换时自动调整内容的大小、样式或布局。</p><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><p><img src="/2022/10/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%94%BB%E4%B8%AD%E7%94%BB%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9.png" alt="浏览器兼容"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./source/a.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pipButton&quot;</span>&gt;</span>切换画中画<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> pipButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;pipButton&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    pipButton.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">pictureInPictureEnabled</span>) &#123; <span class="comment">// 判断是否支持画中画模式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">pictureInPictureElement</span>) &#123; <span class="comment">// 判断当前是否存在画中画</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;当前正处与画中画模式&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// video leave p-i-p模式</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">await</span> <span class="variable language_">document</span>.<span class="title function_">exitPictureInPicture</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// video enter p-i-p 模式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">await</span> video.<span class="title function_">requestPictureInPicture</span>();</span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Video failed to enter Picture-in-Picture mode.</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;浏览器不支持画中画模式&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当进入画中画模式触发该事件</span></span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">&quot;enterpictureinpicture&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Video entered Picture-in-Picture mode.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> pipWindow = event.<span class="property">pictureInPictureWindow</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(pipWindow);</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updateVideoSize</span>(pipWindow.<span class="property">width</span>, pipWindow.<span class="property">height</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听浮动窗口的resize变化</span></span></span><br><span class="line"><span class="language-javascript">      pipWindow.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, onPipWindowResize);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当离开画中画模式触发该事件</span></span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">&quot;leavepictureinpicture&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Video left Picture-in-Picture mode.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> pipWindow = event.<span class="property">pictureInPictureWindow</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(pipWindow)</span></span><br><span class="line"><span class="language-javascript">      pipWindow.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, onPipWindowResize);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">onPipWindowResize</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Picture-in-Picture window has been resized.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; width, height &#125; = event.<span class="property">target</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updateVideoSize</span>(width, height);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">updateVideoSize</span>(<span class="params">width, height</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// <span class="doctag">TODO:</span> Update video size based on pip window width and height.</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器窗口属性 </tag>
            
            <tag> video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium4.4.3 学习笔记及问题记录</title>
      <link href="/2022/09/14/selenium4-4-3%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/"/>
      <url>/2022/09/14/selenium4-4-3%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="selenium最新版本4-4-3-学习笔记及问题记录"><a href="#selenium最新版本4-4-3-学习笔记及问题记录" class="headerlink" title="selenium最新版本4.4.3 学习笔记及问题记录"></a>selenium最新版本4.4.3 学习笔记及问题记录</h1><p>在学习python过程中使用selenium库出现的一些问题记录</p><h2 id="使用find-element-by-xpath使用出错"><a href="#使用find-element-by-xpath使用出错" class="headerlink" title="使用find_element_by_xpath使用出错"></a>使用find_element_by_xpath使用出错</h2><p>在通过xpath获取某个元素时使用find_element_by_xpath出现下面的问题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;WebDriver&#x27; object has no attribute &#x27;find_element_by_xpath&#x27;</span><br></pre></td></tr></table></figure><p>解决方案：<br>1.引入新的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 1. 引入新的包</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"># 2. 修改获取元素的方式为如下：</span><br><span class="line">web.find_element(By.XPATH,&#x27;xpath的具体路径&#x27;)</span><br></pre></td></tr></table></figure><h2 id="无头浏览器"><a href="#无头浏览器" class="headerlink" title="无头浏览器"></a>无头浏览器</h2><p>不打开浏览器进行操作，只操作代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from selenium.webdriver import Chrome</span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line"># 准备配置参数</span><br><span class="line">opts = Options()</span><br><span class="line">opts.add_argument(&#x27;--headless&#x27;)</span><br><span class="line">opts.add_argument(&#x27;--disable-gpu&#x27;)</span><br><span class="line"># 把参数配置设置到浏览器中</span><br><span class="line">web = Chrome(options=opts) </span><br></pre></td></tr></table></figure><ul><li>获取页面（经过请求之后的数据页面，源代码与页面代码不一定一致）<blockquote><p>获取页面代码<br><br>web.page_source()</p></blockquote></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="切换新窗口"><a href="#切换新窗口" class="headerlink" title="切换新窗口"></a>切换新窗口</h3><ul><li>在selenium中。新窗口是默认不切换过来的<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 通过这个方法实现切换新窗口</span><br><span class="line">switch_to.window(web.window_handles[-1])</span><br></pre></td></tr></table></figure></li><li>页面中存在iframe处理方式<br>处理了逻辑；<ul><li>先拿到iframe</li><li>再切换到视角到iframe</li><li>在获取数据</li></ul></li></ul><ul><li>例子：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iframe = web.find_element(By.XPATH,&#x27;iframe的具体路径&#x27;)</span><br><span class="line">web.switch_to.frame(iframe)</span><br><span class="line"># 切换回来</span><br><span class="line">web.switch_to.default_content()</span><br></pre></td></tr></table></figure></li></ul><h3 id="程序在浏览器中包被识别到了怎么办？（以Chrome为例）"><a href="#程序在浏览器中包被识别到了怎么办？（以Chrome为例）" class="headerlink" title="程序在浏览器中包被识别到了怎么办？（以Chrome为例）"></a>程序在浏览器中包被识别到了怎么办？（以Chrome为例）</h3><ul><li>Chrome的版本小于88<blockquote><p>在启动浏览器的时候(此时没有加载任何内容)，向浏览器嵌入js代码，去除webdriver</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">web = Chrome()</span><br><span class="line">web.execute_cdp_cmd(&quot;Page.addScriptToEvaluate&quot;,&#123;</span><br><span class="line">   source:&#x27;&#x27;,</span><br><span class="line">   navigator.webdriver = undefined</span><br><span class="line">   Object.defineProperty(navigator,&#x27;webdriver&#x27;,&#123;</span><br><span class="line">      get:()=&gt; undefined</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li>chrome的版本大于等于88<blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from selenium.webdriver.common.options import Options</span><br><span class="line">opt = Options()</span><br><span class="line">opt.add_argument(&#x27;--disable-blink-features=AutomationControlled&#x27;)</span><br><span class="line">web = Chrome(options=opt)</span><br></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器窗口属性【学习笔记】</title>
      <link href="/2022/07/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AA%97%E5%8F%A3%E5%B1%9E%E6%80%A7%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/"/>
      <url>/2022/07/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AA%97%E5%8F%A3%E5%B1%9E%E6%80%A7%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="浏览器中的窗口属性【笔记】"><a href="#浏览器中的窗口属性【笔记】" class="headerlink" title="浏览器中的窗口属性【笔记】"></a>浏览器中的窗口属性【笔记】</h1><h2 id="HTMLElement-offsetHeight和HTMLElement-offsetWidth"><a href="#HTMLElement-offsetHeight和HTMLElement-offsetWidth" class="headerlink" title="HTMLElement.offsetHeight和HTMLElement.offsetWidth"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetHeight">HTMLElement.offsetHeight</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetWidth">HTMLElement.offsetWidth</a></h2><blockquote><ul><li>HTMLElement.offsetHeight是一个只读属性，返回该元素的像素高度，高度包含了该元素的垂直内边距和边框，且是一个整数。</li><li>包括元素的边框、内边距和元素的水平滚动条，不包含：before等伪类元素的高度。</li><li>如果HTMLElement被隐藏（即元素或者其祖先元素之一的元素的style.display被设置为none），则返回0</li><li>HTMLElement.offsetHeight = content height + padding + border</li><li>HTMLElement.offsetWidth是一个只读属性，返回一个元素的布局宽度。包含元素的边框、水平线上的内边距，竖直方向滚动条以及CSS设置的宽度。</li><li>HTMLElement.offsetWidth = content Width + 水平线上的padding + border</li><li><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/30/1712bce73496e4a1~tplv-t2oaga2asx-zoom-in-crop-mark:3024:0:0:0.awebp"></li></ul></blockquote><h2 id="HTMLElement-offsetParent"><a href="#HTMLElement-offsetParent" class="headerlink" title="HTMLElement.offsetParent"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetTop">HTMLElement.offsetParent</a></h2><blockquote><ul><li><strong><code>HTMLElement.offsetParent</code></strong> 是一个只读属性，返回一个指向最近的（指包含层级上的最近）包含该元素的定位元素或者最近的 <code>table,``td,``th,``body</code>元素。</li><li>当元素的 <code>style.display</code> 设置为 “none” 时，<code>offsetParent</code> 返回 <code>null</code>。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetTop" title="offsetTop"><code>offsetTop</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetLeft" title="offsetLeft"><code>offsetLeft</code></a> 都是相对于其内边距边界的。</li><li>在 Webkit 中，如果元素为隐藏的（该元素或其祖先元素的 <code>style.display</code> 为 “none”），或者该元素的 <code>style.position</code> 被设为 “fixed”，则该属性返回 <code>null</code>。</li><li>在 IE 9 中，如果该元素的 <code>style.position</code> 被设置为 “fixed”，则该属性返回 <code>null</code>。（<code>display:none</code> 无影响。）</li></ul></blockquote><h2 id="HTMLElement-offsetTop和HTMLElement-offsetLeft"><a href="#HTMLElement-offsetTop和HTMLElement-offsetLeft" class="headerlink" title="HTMLElement.offsetTop和HTMLElement.offsetLeft"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetTop">HTMLElement.offsetTop</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetLeft">HTMLElement.offsetLeft</a></h2><blockquote><ul><li><strong><code>HTMLElement.offsetLeft</code></strong> 是一个只读属性，返回当前元素<em>左上角</em>相对于  <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent"><code>HTMLElement.offsetParent</code></a> 节点的左边界偏移的像素值。</li><li><strong><code>HTMLElement.offsetTop</code></strong> 为只读属性，它返回当前元素相对于其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent" title="offsetParent"><code>offsetParent</code></a> 元素的顶部内边距的距离。</li></ul></blockquote><h2 id="Element-clientWidth"><a href="#Element-clientWidth" class="headerlink" title="Element.clientWidth"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientWidth">Element.clientWidth</a></h2><blockquote><ul><li><code>Element.clientWidth</code> 属性表示元素的内部宽度，以像素计。该属性包括内边距 padding，但不包括边框 border、外边距 margin 和垂直滚动条。</li><li>当在根元素 (<html>元素) 上使用 clientWidth 时 (或者在<body>上，如果文档是在 quirks(怪异) 模式下)，将返回 viewport 的宽度 (不包括任何滚动条)</body></html></li><li>Element.clientWidth = content width + padding - （滚动条的宽度+边框宽度）</li></ul></blockquote><h2 id="Element-clientHeight"><a href="#Element-clientHeight" class="headerlink" title="Element.clientHeight"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientHeight">Element.clientHeight</a></h2><blockquote><ul><li>这个属性是只读属性</li><li><code>clientHeight</code> 可以通过 CSS <code>height</code> + CSS <code>padding</code> - 水平滚动条高度 (如果存在) 来计算。</li></ul></blockquote><h2 id="clientWidth-和ClientHeight的注意事项"><a href="#clientWidth-和ClientHeight的注意事项" class="headerlink" title="clientWidth 和ClientHeight的注意事项"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientWidth">clientWidth</a> 和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientHeight">ClientHeight</a>的注意事项</h2><blockquote><p>注意事项：使用 <code>element.getBoundingClientRect()</code>无法准确获取元素的ClientWidth和ClientHeight。</p><p> 因为使用 element.getBoundingClientRect() 只能获取元素的 width / height，但是这个值是 offsetWidth / offsetHeight ，包括边框的长度，所以不能获取 clientWidth / clientHeight</p></blockquote><h2 id="Element-clientTop和Element-clientLeft"><a href="#Element-clientTop和Element-clientLeft" class="headerlink" title="Element.clientTop和Element.clientLeft"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/client">Element.clientTop</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientLeft">Element.clientLeft</a></h2><blockquote><ul><li>一个元素顶部边框的宽度（以像素表示）。不包括顶部外边距或内边距。<code>clientTop</code> 是只读的。</li><li>表示一个元素的左边框的宽度，以像素表示</li><li>如果元素的文本方向是从右向左（RTL, right-to-left），并且由于内容溢出导致左边出现了一个垂直滚动条，则该属性包括滚动条的宽度。</li><li><code>clientLeft</code> 不包括左外边距和左内边距。</li><li><code>clientLeft</code> 是只读的。</li></ul></blockquote><h2 id="Element-scrollHeight"><a href="#Element-scrollHeight" class="headerlink" title="Element.scrollHeight"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollHeight">Element.scrollHeight</a></h2><blockquote><ul><li><strong><code>Element.scrollHeight</code></strong> 这个只读属性是一个元素内容高度的度量，包括由于溢出导致的视图中不可见内容。</li><li><img src="https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight/scrollheight.png"></li><li><code>scrollHeight</code> 的值等于该元素在不使用滚动条的情况下为了适应视口中所用内容所需的最小高度。</li><li>没有垂直滚动条的情况下，scrollHeight 值与元素视图填充所有内容所需要的最小值<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/clientHeight" title="clientHeight"><code>clientHeight</code></a>相同。</li><li><code>scrollHeight</code> 也包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before"><code>::before</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after"><code>::after</code></a>这样的伪元素。</li></ul></blockquote><h2 id="Element-scrollWidth"><a href="#Element-scrollWidth" class="headerlink" title="Element.scrollWidth"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollWidth">Element.scrollWidth</a></h2><blockquote><ul><li><strong><code>Element.scrollWidth</code></strong> 这个只读属性是元素内容宽度的一种度量，包括由于 overflow 溢出而在屏幕上不可见的内容。</li><li><code>scrollWidth</code>值等于元素在不使用水平滚动条的情况下适合视口中的所有内容所需的最小宽度。</li><li>它还可以包括伪元素的宽度，例如<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before"><code>::before</code></a>或<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after"><code>::after</code></a>。</li><li><em>在实际测试过程中，谷歌获取的</em> <strong><code>Element.scrollWidth</code></strong> 和 IE，火狐下获取的 <strong><code>Element.scrollWidth</code></strong> 并不相同</li></ul></blockquote><h2 id="0-Element-scrollLeft"><a href="#0-Element-scrollLeft" class="headerlink" title="0 Element.scrollLeft"></a>0 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollLeft">Element.scrollLeft</a></h2><blockquote><ul><li><strong><code>Element.scrollLeft</code></strong> 属性可以读取或设置元素滚动条到元素左边的距离。</li><li>注意如果这个元素的内容排列方向（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/direction"><code>direction</code></a>）是<code>rtl</code> (right-to-left) ，那么滚动条会位于最右侧（内容开始处），并且<code>scrollLeft</code>值为 0。此时，当你从右到左拖动滚动条时，scrollLeft 会从 0 变为负数。</li><li>如果元素不能滚动（比如：元素没有溢出），那么<code>scrollLeft</code> 的值是 0。</li><li>如果给<code>scrollLeft</code> 设置的值小于 0，那么<code>scrollLeft</code> 的值将变为 0。</li><li>如果给<code>scrollLeft</code> 设置的值大于元素内容最大宽度，那么<code>scrollLeft</code> 的值将被设为元素最大宽度。</li></ul></blockquote><h2 id="Element-scrollTop"><a href="#Element-scrollTop" class="headerlink" title="Element.scrollTop"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop">Element.scrollTop</a></h2><blockquote><ul><li><code>**Element.scrollTop**</code> 属性可以获取或设置一个元素的内容垂直滚动的像素数。</li><li>一个元素的 <code>scrollTop</code> 值是这个元素的<strong>内容顶部</strong>（卷起来的）到它的视口可见内容（的顶部）的距离的度量。当一个元素的内容没有产生垂直方向的滚动条，那么它的 <code>scrollTop</code> 值为<code>0</code>。</li><li>如果一个元素不能被滚动（例如，它没有溢出，或者这个元素有一个”**non-scrollable”**属性）， <code>scrollTop</code>将被设置为<code>0</code>。</li><li>设置<code>scrollTop</code>的值小于 0，<code>scrollTop</code> 被设为<code>0</code></li><li>如果设置了超出这个容器可滚动的值，<code>scrollTop</code> 会被设为最大值。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器窗口属性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面优化</title>
      <link href="/2022/06/29/%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2022/06/29/%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h1><h2 id="页面生存周期"><a href="#页面生存周期" class="headerlink" title="页面生存周期"></a>页面生存周期</h2><h3 id="页面周期"><a href="#页面周期" class="headerlink" title="页面周期"></a>页面周期</h3><p>通常一个页面有三个阶段：<strong>加载阶段</strong>、<strong>交互阶段</strong>和<strong>关闭阶段</strong>。</p><ul><li>加载阶段：从发出请求到渲染出完整页面的过程，影响到这个阶段的主要因素有网络和JavaScript脚本。</li><li>交互阶段：从页面加载完成到用户交互的整合过程，影响到这个阶段的主要因素是JavaScript脚本。</li><li>关闭阶段：用户发出关闭指令后页面所做的一些操作</li></ul><h4 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h4><p>并非所有的资源都会阻塞页面的首次绘制，比如图片、音频、视频等文件不会阻塞页面的首次渲染；而JavaScript、首次请求的HTML资源文件、CSS文件是会阻塞首次渲染。</p><p><strong>关键资源：阻塞网页首页渲染的资源。</strong></p><p>影响页面首次渲染的核心因素：</p><ul><li>关键资源个数：关键资源个数越多，首次页面的加载时间就会越长。</li><li>关键资源大小：关键资源的内容越小，其整个资源的下载时间也就越短，那么阻塞渲染的时间也就越短</li><li>请求关键资源需要多少个RTT（Round Trip Time）。（当Tcp协议传输一个文件时，比如这个文件大小是0.1M，由于TCP的特性，这个数据不是一次传输到服务端的，而是需要拆分程一个个数据包来多次进行传输的。<strong>RTT在这就是指往返时延，是网络中一个重要的性能指标，表示从发送端发送数据开始，到发送端收到来自接收端的确认，总共经历的时延。</strong>）</li></ul><p><strong>优化原则：减少关键资源个数，降低关键资源大小，降低关键资源的RTT次数。</strong></p><ul><li>减少关键资源个数</li></ul><ol><li>将JavaScript和CSS改为内联的形式。</li><li>如果JS资源文件没有DOM和CSSOM的操作，则可以改为sync或者defer属性。同样对CSS，如果不是在构建页面之前加载的，则可以添加媒体取消阻止显现的标志。这样这些资源就变为非关键资源了。</li></ol><ul><li>降低关键资源大小</li></ul><ol><li>压缩CSS和JavaScript资源，移除HTML、CSS、JavaScript文件中的一些注释内容。    </li></ol><ul><li>减少关键资源RTT的次数</li></ul><ol><li>通过减少关键资源的个数和减少关键资源大小结合实现。</li><li>CDN</li></ol><h4 id="交互阶段"><a href="#交互阶段" class="headerlink" title="交互阶段"></a>交互阶段</h4><p>交互阶段的优化，实际上就是渲染进程中渲染帧的速度，帧的渲染速度决定了交互的流畅度。</p><p><strong>原则：让单个帧的生成速度变快。</strong></p><ul><li>减少JavaScript脚本执行时间（不要一次霸占太久的主线程）</li></ul><ol><li>将一次执行的函数分解为多个任务。使得每次的执行时间不要过久。</li><li>采用Web Workers。可以将Web Workers当作主线程之外的一个线程，在Web workers中是可以执行JavaScript脚本的，不过它没有DOM，CSSOM环境，意味着在它中无法通过JS访问DOM，所以我们可以将一些无需DOM操作且耗时的任务放到Web Workers中执行。</li></ol><ul><li>避免强制同步布局（强制同步布局：指JavaScript强制将计算样式和布局操作提前到当前任务中）</li></ul><ol><li>不要在修改DOM结构的时候去查询当前修改范围内的DOM的一些相关值。</li></ol><ul><li>避免强制布局抖动（强制布局抖动：一次JS执行过程中，多次执行强制布局的操作。）</li></ul><ol><li>不要在修改DOM结构的时候去查询当前修改范围内的DOM的一些相关值。</li></ol><ul><li>合理利用CSS合成动画</li></ul><ol><li>合成动画是在合成线程中执行的，这个主线程上执行的布局、绘制操作不同，如果主线程被JavaScript或者一下布局任务占用，CSS动画依然能执行。所以，能让CSS处理动画就让处理。</li></ol><ul><li>避免频繁的垃圾回收</li></ul><ol><li>避免频繁在函数中创建一些临时对象，那么垃圾回收器也会频繁的执行垃圾回收策略，当该操作发生时，就会占用主线程，从而影响其他任务的执行。</li><li>解决方案，优化存储结构，尽可能避免小颗粒对象的产生。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 页面优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eslint配置问题</title>
      <link href="/2022/06/29/eslint%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
      <url>/2022/06/29/eslint%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在项目中存在代码语法存在“在代码结尾处没有添加分号”，存在上千乃至万行代码没有添加上分号，过不了公司的静态扫描问题。所以在这个前提下开发准备使用eslint使代码规范。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>1、安装eslint<br>npm install eslint -g<br>或者<br>npm install eslint –save-dev</p><p>2.在项目中使用eslint，首先先确认项目中是否存在.eslintrc.js这个文件。不存在的话：两种方式<br>拷贝旧项目的.eslintrc文件到项目中<br>使用命令行生成<br>eslint –init</p><p>   然后按照提示步骤操作就行！</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>1.初始化.eslintrc.js文件时出现的问题<br>Oops! Something went wrong! :(</p><p>ESLint couldn’t find the plugin “eslint-plugin-vue@lastest”. This can happen for a couple different reasons:</p><ol><li><p>If ESLint is installed globally, then make sure eslint-plugin-vue@lastest is also installed globally. A globally-installed ESLint cannot find a locally-installed plugin.</p></li><li><p>If ESLint is installed locally, then it’s likely that the plugin isn’t installed correctly. Try reinstalling by running the following:</p></li></ol><p>问题原因：（node版本为10.6.0）<br>eslint版本与node版本冲突，eslint不再支持 Node.js v8<br>解决方法：<br>所以对node版本升级或者对eslint版本降级就可以了</p><p>2.我为了保持自身环境的node版本不变时，只能选择将eslint版本降级。<br>npm install <a href="mailto:&#x65;&#115;&#108;&#x69;&#x6e;&#116;&#x40;&#x36;&#x2e;&#x38;&#46;&#x30;">&#x65;&#115;&#108;&#x69;&#x6e;&#116;&#x40;&#x36;&#x2e;&#x38;&#46;&#x30;</a> -D</p><p>将eslint降级发现出现这样的错误：<br>Parsing error: Unexpected token</p><p>出现原因：<br>因为开发环境与eslint当前的解析功能呢不兼容。<br>解决方法：<br>使用babel-eslint解析<br>npm install babel-eslint</p><p>在.eslintrc.js中配置<br>“parse”: “babel-eslint”</p><p>以上解决问题！<br>最后使用一下命令所有的文件的代码语句后增加分号<br>eslint –fix</p><p>最后附上完整的eslint配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">        &quot;browser&quot;: true,</span><br><span class="line">        &quot;commonjs&quot;: true,</span><br><span class="line">        &quot;es6&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;extends&quot;: &quot;eslint:recommended&quot;,</span><br><span class="line">    &quot;parserOptions&quot;: &#123;</span><br><span class="line">        &quot;ecmaFeatures&quot;: &#123;</span><br><span class="line">            &quot;jsx&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;sourceType&quot;: &quot;module&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;globals&quot;: &#123;</span><br><span class="line">        &quot;app&quot;: true,</span><br><span class="line">        &quot;angular&quot;: true,</span><br><span class="line">        &quot;$&quot;: true,</span><br><span class="line">        &quot;npc&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">        &quot;linebreak-style&quot;: [</span><br><span class="line">            &quot;error&quot;,</span><br><span class="line">            &quot;windows&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;no-alert&quot;: 2, //禁止使用alert confirm prompt</span><br><span class="line">        &quot;no-array-constructor&quot;: 2, //禁止使用数组构造器</span><br><span class="line">        &quot;no-bitwise&quot;: 0, //禁止使用按位运算符</span><br><span class="line">        &quot;no-caller&quot;: 1, //禁止使用arguments.caller或arguments.callee</span><br><span class="line">        &quot;no-catch-shadow&quot;: 2, //禁止catch子句参数与外部作用域变量同名</span><br><span class="line">        &quot;no-class-assign&quot;: 2, //禁止给类赋值</span><br><span class="line">        &quot;no-cond-assign&quot;: 2, //禁止在条件表达式中使用赋值语句</span><br><span class="line">        &quot;no-console&quot;: 1, //禁止使用console</span><br><span class="line">        &quot;no-const-assign&quot;: 2, //禁止修改const声明的变量</span><br><span class="line">        &quot;no-constant-condition&quot;: 2, //禁止在条件中使用常量表达式 if(true) if(1)</span><br><span class="line">        &quot;no-continue&quot;: 0, //禁止使用continue</span><br><span class="line">        &quot;no-control-regex&quot;: 2, //禁止在正则表达式中使用控制字符</span><br><span class="line">        &quot;no-debugger&quot;: 2, //禁止使用debugger</span><br><span class="line">        &quot;no-delete-var&quot;: 2, //不能对var声明的变量使用delete操作符</span><br><span class="line">        &quot;no-div-regex&quot;: 1, //不能使用看起来像除法的正则表达式/=foo/</span><br><span class="line">        &quot;no-dupe-keys&quot;: 2, //在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span><br><span class="line">        &quot;no-dupe-args&quot;: 2, //函数参数不能重复</span><br><span class="line">        &quot;no-duplicate-case&quot;: 2, //switch中的case标签不能重复</span><br><span class="line">        &quot;no-else-return&quot;: 2, //如果if语句里面有return,后面不能跟else语句</span><br><span class="line">        &quot;no-empty&quot;: 2, //块语句中的内容不能为空</span><br><span class="line">        &quot;no-empty-character-class&quot;: 2, //正则表达式中的[]内容不能为空</span><br><span class="line">        &quot;no-eq-null&quot;: 2, //禁止对null使用==或!=运算符</span><br><span class="line">        &quot;no-eval&quot;: 1, //禁止使用eval</span><br><span class="line">        &quot;no-ex-assign&quot;: 2, //禁止给catch语句中的异常参数赋值</span><br><span class="line">        &quot;no-extend-native&quot;: 2, //禁止扩展native对象</span><br><span class="line">        &quot;no-extra-bind&quot;: 2, //禁止不必要的函数绑定</span><br><span class="line">        &quot;no-extra-boolean-cast&quot;: 2, //禁止不必要的bool转换</span><br><span class="line">        &quot;no-extra-parens&quot;: 2, //禁止非必要的括号</span><br><span class="line">        &quot;no-extra-semi&quot;: 2, //禁止多余的冒号</span><br><span class="line">        &quot;no-fallthrough&quot;: 1, //禁止switch穿透</span><br><span class="line">        &quot;no-floating-decimal&quot;: 2, //禁止省略浮点数中的0 .5 3.</span><br><span class="line">        &quot;no-func-assign&quot;: 2, //禁止重复的函数声明</span><br><span class="line">        &quot;no-implicit-coercion&quot;: 1, //禁止隐式转换</span><br><span class="line">        &quot;no-implied-eval&quot;: 2, //禁止使用隐式eval</span><br><span class="line">        &quot;no-inline-comments&quot;: 0, //禁止行内备注</span><br><span class="line">        &quot;no-inner-declarations&quot;: [2, &quot;functions&quot;], //禁止在块语句中使用声明（变量或函数）</span><br><span class="line">        &quot;no-invalid-regexp&quot;: 2, //禁止无效的正则表达式</span><br><span class="line">        &quot;no-invalid-this&quot;: 2, //禁止无效的this，只能用在构造器，类，对象字面量</span><br><span class="line">        &quot;no-irregular-whitespace&quot;: 2, //不能有不规则的空格</span><br><span class="line">        &quot;no-iterator&quot;: 2, //禁止使用__iterator__ 属性</span><br><span class="line">        &quot;no-label-var&quot;: 2, //label名不能与var声明的变量名相同</span><br><span class="line">        &quot;no-labels&quot;: 2, //禁止标签声明</span><br><span class="line">        &quot;no-lone-blocks&quot;: 2, //禁止不必要的嵌套块</span><br><span class="line">        &quot;no-lonely-if&quot;: 2, //禁止else语句内只有if语句</span><br><span class="line">        &quot;no-loop-func&quot;: 1, //禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span><br><span class="line">        &quot;no-mixed-requires&quot;: [0, false], //声明时不能混用声明类型</span><br><span class="line">        &quot;no-mixed-spaces-and-tabs&quot;: [2, false], //禁止混用tab和空格</span><br><span class="line">        &quot;linebreak-style&quot;: [0, &quot;windows&quot;], //换行风格</span><br><span class="line">        &quot;no-multi-spaces&quot;: 1, //不能用多余的空格</span><br><span class="line">        &quot;no-multi-str&quot;: 2, //字符串不能用\换行</span><br><span class="line">        &quot;no-multiple-empty-lines&quot;: [1, &#123; &quot;max&quot;: 2 &#125;], //空行最多不能超过2行</span><br><span class="line">        &quot;no-native-reassign&quot;: 2, //不能重写native对象</span><br><span class="line">        &quot;no-negated-in-lhs&quot;: 2, //in 操作符的左边不能有!</span><br><span class="line">        &quot;no-nested-ternary&quot;: 0, //禁止使用嵌套的三目运算</span><br><span class="line">        &quot;no-new&quot;: 1, //禁止在使用new构造一个实例后不赋值</span><br><span class="line">        &quot;no-new-func&quot;: 1, //禁止使用new Function</span><br><span class="line">        &quot;no-new-object&quot;: 2, //禁止使用new Object()</span><br><span class="line">        &quot;no-new-require&quot;: 2, //禁止使用new require</span><br><span class="line">        &quot;no-new-wrappers&quot;: 2, //禁止使用new创建包装实例，new String new Boolean new Number</span><br><span class="line">        &quot;no-obj-calls&quot;: 2, //不能调用内置的全局对象，比如Math() JSON()</span><br><span class="line">        &quot;no-octal&quot;: 2, //禁止使用八进制数字</span><br><span class="line">        &quot;no-octal-escape&quot;: 2, //禁止使用八进制转义序列</span><br><span class="line">        &quot;no-param-reassign&quot;: 2, //禁止给参数重新赋值</span><br><span class="line">        &quot;no-path-concat&quot;: 0, //node中不能使用__dirname或__filename做路径拼接</span><br><span class="line">        &quot;no-plusplus&quot;: 0, //禁止使用++，--</span><br><span class="line">        &quot;no-process-env&quot;: 0, //禁止使用process.env</span><br><span class="line">        &quot;no-process-exit&quot;: 0, //禁止使用process.exit()</span><br><span class="line">        &quot;no-proto&quot;: 2, //禁止使用__proto__属性</span><br><span class="line">        &quot;no-redeclare&quot;: 2, //禁止重复声明变量</span><br><span class="line">        &quot;no-regex-spaces&quot;: 2, //禁止在正则表达式字面量中使用多个空格 /foo bar/</span><br><span class="line">        &quot;no-restricted-modules&quot;: 0, //如果禁用了指定模块，使用就会报错</span><br><span class="line">        &quot;no-return-assign&quot;: 1, //return 语句中不能有赋值表达式</span><br><span class="line">        &quot;no-script-url&quot;: 0, //禁止使用javascript:void(0)</span><br><span class="line">        &quot;no-self-compare&quot;: 2, //不能比较自身</span><br><span class="line">        &quot;no-sequences&quot;: 0, //禁止使用逗号运算符</span><br><span class="line">        &quot;no-shadow&quot;: 2, //外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span><br><span class="line">        &quot;no-shadow-restricted-names&quot;: 2, //严格模式中规定的限制标识符不能作为声明时的变量名使用</span><br><span class="line">        &quot;no-spaced-func&quot;: 2, //函数调用时 函数名与()之间不能有空格</span><br><span class="line">        &quot;no-sparse-arrays&quot;: 2, //禁止稀疏数组， [1,,2]</span><br><span class="line">        &quot;no-sync&quot;: 0, //nodejs 禁止同步方法</span><br><span class="line">        &quot;no-ternary&quot;: 0, //禁止使用三目运算符</span><br><span class="line">        &quot;no-trailing-spaces&quot;: 1, //一行结束后面不要有空格</span><br><span class="line">        &quot;no-this-before-super&quot;: 0, //在调用super()之前不能使用this或super</span><br><span class="line">        &quot;no-throw-literal&quot;: 2, //禁止抛出字面量错误 throw &quot;error&quot;;</span><br><span class="line">        &quot;no-undef&quot;: 1, //不能有未定义的变量</span><br><span class="line">        &quot;no-undef-init&quot;: 2, //变量初始化时不能直接给它赋值为undefined</span><br><span class="line">        &quot;no-undefined&quot;: 2, //不能使用undefined</span><br><span class="line">        &quot;no-unexpected-multiline&quot;: 2, //避免多行表达式</span><br><span class="line">        &quot;no-underscore-dangle&quot;: 1, //标识符不能以_开头或结尾</span><br><span class="line">        &quot;no-unneeded-ternary&quot;: 2, //禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span><br><span class="line">        &quot;no-unreachable&quot;: 2, //不能有无法执行的代码</span><br><span class="line">        &quot;no-unused-expressions&quot;: 2, //禁止无用的表达式</span><br><span class="line">        &quot;no-unused-vars&quot;: [2, &#123; &quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot; &#125;], //不能有声明后未被使用的变量或参数</span><br><span class="line">        &quot;no-use-before-define&quot;: 2, //未定义前不能使用</span><br><span class="line">        &quot;no-useless-call&quot;: 2, //禁止不必要的call和apply</span><br><span class="line">        &quot;no-void&quot;: 2, //禁用void操作符</span><br><span class="line">        &quot;no-var&quot;: 0, //禁用var，用let和const代替</span><br><span class="line">        &quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;], //不能有警告备注</span><br><span class="line">        &quot;no-with&quot;: 2, //禁用with</span><br><span class="line">        &quot;array-bracket-spacing&quot;: [2, &quot;never&quot;], //是否允许非空数组里面有多余的空格</span><br><span class="line">        &quot;arrow-parens&quot;: 0, //箭头函数用小括号括起来</span><br><span class="line">        &quot;arrow-spacing&quot;: 0, //=&gt;的前/后括号</span><br><span class="line">        &quot;accessor-pairs&quot;: 0, //在对象中使用getter/setter</span><br><span class="line">        &quot;block-scoped-var&quot;: 0, //块语句中使用var</span><br><span class="line">        &quot;brace-style&quot;: [1, &quot;1tbs&quot;], //大括号风格</span><br><span class="line">        &quot;callback-return&quot;: 1, //避免多次调用回调什么的</span><br><span class="line">        &quot;camelcase&quot;: 2, //强制驼峰法命名</span><br><span class="line">        &quot;comma-dangle&quot;: [2, &quot;never&quot;], //对象字面量项尾不能有逗号</span><br><span class="line">        &quot;comma-spacing&quot;: 0, //逗号前后的空格</span><br><span class="line">        &quot;comma-style&quot;: [2, &quot;last&quot;], //逗号风格，换行时在行首还是行尾</span><br><span class="line">        &quot;complexity&quot;: [0, 11], //循环复杂度</span><br><span class="line">        &quot;computed-property-spacing&quot;: [0, &quot;never&quot;], //是否允许计算后的键名什么的</span><br><span class="line">        &quot;consistent-return&quot;: 0, //return 后面是否允许省略</span><br><span class="line">        &quot;consistent-this&quot;: [2, &quot;that&quot;], //this别名</span><br><span class="line">        &quot;constructor-super&quot;: 0, //非派生类不能调用super，派生类必须调用super</span><br><span class="line">        &quot;curly&quot;: [2, &quot;all&quot;], //必须使用 if()&#123;&#125; 中的&#123;&#125;</span><br><span class="line">        &quot;default-case&quot;: 2, //switch语句最后必须有default</span><br><span class="line">        &quot;dot-location&quot;: 0, //对象访问符的位置，换行的时候在行首还是行尾</span><br><span class="line">        &quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;], //避免不必要的方括号</span><br><span class="line">        &quot;eol-last&quot;: 0, //文件以单一的换行符结束</span><br><span class="line">        &quot;eqeqeq&quot;: 2, //必须使用全等</span><br><span class="line">        &quot;func-names&quot;: 0, //函数表达式必须有名字</span><br><span class="line">        &quot;func-style&quot;: [0, &quot;declaration&quot;], //函数风格，规定只能使用函数声明/函数表达式</span><br><span class="line">        &quot;generator-star-spacing&quot;: 0, //生成器函数*的前后空格</span><br><span class="line">        &quot;guard-for-in&quot;: 0, //for in循环要用if语句过滤</span><br><span class="line">        &quot;handle-callback-err&quot;: 0, //nodejs 处理错误</span><br><span class="line">        &quot;id-length&quot;: 0, //变量名长度</span><br><span class="line">        &quot;indent&quot;: [2, 2], //缩进风格</span><br><span class="line">        &quot;init-declarations&quot;: 0, //声明时必须赋初值</span><br><span class="line">        &quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;], //对象字面量中冒号的前后空格</span><br><span class="line">        &quot;lines-around-comment&quot;: 0, //行前/行后备注</span><br><span class="line">        &quot;max-depth&quot;: [0, 4], //嵌套块深度</span><br><span class="line">        &quot;max-len&quot;: [0, 80, 4], //字符串最大长度</span><br><span class="line">        &quot;max-nested-callbacks&quot;: [0, 4], //回调嵌套深度</span><br><span class="line">        &quot;max-params&quot;: [0, 3], //函数最多只能有3个参数</span><br><span class="line">        &quot;max-statements&quot;: [0, 10], //函数内最多有几个声明</span><br><span class="line">        &quot;new-cap&quot;: 2, //函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span><br><span class="line">        &quot;new-parens&quot;: 2, //new时必须加小括号</span><br><span class="line">        &quot;newline-after-var&quot;: 0, //变量声明后是否需要空一行</span><br><span class="line">        &quot;object-curly-spacing&quot;: [0, &quot;never&quot;], //大括号内是否允许不必要的空格</span><br><span class="line">        &quot;object-shorthand&quot;: 0, //强制对象字面量缩写语法</span><br><span class="line">        &quot;one-var&quot;: 1, //连续声明</span><br><span class="line">        &quot;operator-assignment&quot;: [0, &quot;always&quot;], //赋值运算符 += -=什么的</span><br><span class="line">        &quot;operator-linebreak&quot;: [2, &quot;after&quot;], //换行时运算符在行尾还是行首</span><br><span class="line">        &quot;padded-blocks&quot;: 0, //块语句内行首行尾是否要空行</span><br><span class="line">        &quot;prefer-const&quot;: 0, //首选const</span><br><span class="line">        &quot;prefer-spread&quot;: 0, //首选展开运算</span><br><span class="line">        &quot;prefer-reflect&quot;: 0, //首选Reflect的方法</span><br><span class="line">        &quot;quotes&quot;: [2, &quot;single&quot;], //引号类型 `` &quot;&quot; &#x27;&#x27;</span><br><span class="line">        &quot;quote-props&quot;: [0, &quot;always&quot;], //对象字面量中的属性名是否强制双引号</span><br><span class="line">        &quot;radix&quot;: 0, //parseInt必须指定第二个参数</span><br><span class="line">        &quot;id-match&quot;: 0, //命名检测</span><br><span class="line">        &quot;require-yield&quot;: 0, //生成器函数必须有yield</span><br><span class="line">        &quot;semi&quot;: [2, &quot;always&quot;], //语句强制分号结尾</span><br><span class="line">        &quot;semi-spacing&quot;: [2, &#123; &quot;before&quot;: false, &quot;after&quot;: true &#125;], //分号前后空格</span><br><span class="line">        &quot;sort-vars&quot;: 0, //变量声明时排序</span><br><span class="line">        &quot;space-after-keywords&quot;: [0, &quot;always&quot;], //关键字后面是否要空一格</span><br><span class="line">        &quot;space-before-blocks&quot;: [0, &quot;always&quot;], //不以新行开始的块&#123;前面要不要有空格</span><br><span class="line">        &quot;space-before-function-paren&quot;: [0, &quot;always&quot;], //函数定义时括号前面要不要有空格</span><br><span class="line">        &quot;space-in-parens&quot;: [0, &quot;never&quot;], //小括号里面要不要有空格</span><br><span class="line">        &quot;space-infix-ops&quot;: 0, //中缀操作符周围要不要有空格</span><br><span class="line">        &quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;], //一元运算符的前/后要不要加空格</span><br><span class="line">        &quot;spaced-comment&quot;: 0, //注释风格要不要有空格什么的</span><br><span class="line">        &quot;strict&quot;: 2, //使用严格模式</span><br><span class="line">        &quot;use-isnan&quot;: 2, //禁止比较时使用NaN，只能用isNaN()</span><br><span class="line">        &quot;valid-jsdoc&quot;: 0, //jsdoc规则</span><br><span class="line">        &quot;valid-typeof&quot;: 2, //必须使用合法的typeof的值</span><br><span class="line">        &quot;vars-on-top&quot;: 1, //var必须放在作用域顶部</span><br><span class="line">        &quot;wrap-iife&quot;: [2, &quot;inside&quot;], //立即执行函数表达式的小括号风格</span><br><span class="line">        &quot;wrap-regex&quot;: 0, //正则表达式字面量用小括号包起来</span><br><span class="line">        &quot;yoda&quot;: [2, &quot;never&quot;] //禁止尤达条件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Eslint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下Home目录的问题</title>
      <link href="/2022/03/31/Mac%E4%B8%8BHome%E7%9B%AE%E5%BD%95%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/31/Mac%E4%B8%8BHome%E7%9B%AE%E5%BD%95%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>在使用Mac的时候，想用Mac来做本地服务器。想把文件放到Home下，但是一旦重新启动电脑。Home下新建的目录没有了。</p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>在mac10.15及以上，默认开启了SIP系统保护，开发中的普通用户是无法创建文件。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><ol><li>打开终端</li><li>输入以下命令</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/auto_master</span><br></pre></td></tr></table></figure><ol start="3"><li>去掉根目录下的 #，保存文件退出；</li><li>回到根目录</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br></pre></td></tr></table></figure><ol start="5"><li>执行下面的命令</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo automount</span><br></pre></td></tr></table></figure><p>Tips：注意这种方法，一旦电脑重启了，home目录下的文件就没有了。</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> Mac的使用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序的使用（一）</title>
      <link href="/2022/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><div class="note modern"><p>记录小程序的学习</p></div><h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><h2 id="安装开发者工具"><a href="#安装开发者工具" class="headerlink" title="安装开发者工具"></a>安装开发者工具</h2><p>1.工欲善其事，必先利其器。首先安装工具，到微信小程序开放文档中<br><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html</a><br>下载对应的版本的工具软件。<br>2.注册微信公众平台的账号<br>3.根据下面指示找到开发者的AppId</p><img src="/2022/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/%E6%B3%A8%E5%86%8C.jpg" class><img src="/2022/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/appid.jpg" class><p>4.打开微信开发者工具，新建项目，填写对应的Appid或者密钥</p><img src="/2022/03/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89/%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8.jpg" class>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在mac下安装Nginx出现的问题</title>
      <link href="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装nginx之前首先需要安装homebrew</p><p>1.使用的是安装清华大学镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HoemebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><p>2.安装通过brew –version 查看homebrew版本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure><p>3.安装Nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>4.出现错误：</p><img src="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image.png" class><p>解析：最开始在网络上查找了多个解决办法，但是都没有办法解决。最后发现可能是执行错误。于是尝试一下的操作<br>安装红框中的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl@1.1</span><br></pre></td></tr></table></figure><p>再次尝试安装nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>中间正常安装，没有出现错误，到这里还不能说nginx正常安装了，为了防止安装出错。<br>查看nginx信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info nginx</span><br></pre></td></tr></table></figure><p>运行nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start nginx</span><br></pre></td></tr></table></figure><p>运行成功！<br>在浏览器中输入localhost:8080,看到一下场景就知道nginx成功了！</p><img src="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/image1.png" class>]]></content>
      
      
      <categories>
          
          <category> Mac - Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在mac下安装Nginx</title>
      <link href="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/"/>
      <url>/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="一、安装-卸载Nginx"><a href="#一、安装-卸载Nginx" class="headerlink" title="一、安装/卸载Nginx"></a>一、安装/卸载Nginx</h1><p>安装Nginx（出现问题查看<a href="https://note.youdao.com/s/LJ9GXxuM%EF%BC%89">https://note.youdao.com/s/LJ9GXxuM）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>卸载Nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall nginx</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx / sudo brew services start nginx</span><br></pre></td></tr></table></figure><p>停止</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s stop /sudo brew services stop nginx</span><br></pre></td></tr></table></figure><p>热重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>强制停止Nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pkill -9 nginx</span><br></pre></td></tr></table></figure><p>修改配置<br>本机常用的文件路径：</p><ul><li>1./opt/homebrew/etc/nginx/nginx.conf（nginx配置文件路径）</li><li>2./opt/homebrew/var/www(nginx服务器默认的根目录)</li><li>3./opt/homebrew/var/log/nginx/error.log(nginx默认的日志路径)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 首尾配置暂时忽略</span><br><span class="line"></span><br><span class="line">server &#123;  </span><br><span class="line">        # 当nginx接到请求后，会匹配其配置中的service模块</span><br><span class="line">        # 匹配方法就是将请求携带的host和port去跟配置中的server_name和listen相匹配</span><br><span class="line">        listen       8080;        </span><br><span class="line">        server_name  localhost; # 定义当前虚拟主机（站点）匹配请求的主机名</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; # Nginx默认值</span><br><span class="line">            # 设定Nginx服务器返回的文档名</span><br><span class="line">            index  index.html index.htm; # 先找根目录下的index.html，如果没有再找index.htm</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 首尾配置暂时忽略</span><br></pre></td></tr></table></figure><p>当然 nginx 的配置非常多，用的时候可以根据文档进行配置。中文文档：<a href="https://www.nginx.cn/doc/">https://www.nginx.cn/doc/</a></p><h1 id="Nginx应用"><a href="#Nginx应用" class="headerlink" title="Nginx应用"></a>Nginx应用</h1><p>主要是4大应用</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><img src="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/2.jpg" class title="你想输入的替代文字"><p>如图所示：动静分离就是Nginx服务器将接收到的请求分为动态请求和静态请求。<br>静态请求直接从 nginx 服务器所设定的根目录路径去取对应的资源，动态请求转发给真实的后台（前面所说的应用服务器，如图中的Tomcat）去处理。<br>好处：<br>减少应用服务器的压力。<br>后台api接口服务化。<br>前后端分开并行开发和部署。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123; </span><br><span class="line">    listen 8080; </span><br><span class="line">    server_name localhost; </span><br><span class="line">    location / &#123; </span><br><span class="line">        root html; # Nginx默认值</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125; </span><br><span class="line">    # 静态化配置，所有静态请求都转发给 nginx 处理，存放目录为 my-project </span><br><span class="line">    location ~ .*\.(html|htm|gif|jpg|jpeg|bmp|png|ico|js|css)$ &#123; </span><br><span class="line">        root /usr/local/var/www/my-project; # 静态请求所代理到的根目录 </span><br><span class="line">   &#125; </span><br><span class="line">   # 动态请求匹配到path为&#x27;node&#x27;的就转发到8002端口处理 </span><br><span class="line">    location /node/ &#123;</span><br><span class="line">         proxy_pass http://localhost:8002; # 充当服务代理 </span><br><span class="line">    &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>访问静态资源nginx就会返回my-project中的文件<br>访问动态请求nginx服务器会将它从8002的端口请求返回回去。</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p>反向代理其实类似于你找代购买东西（浏览器或者其他终端向nginx请求），你不用管它去哪里买，只要买到东西就行了（浏览器或者其他终端最终拿到了想要的东西，但是具体从那儿拿到的过程它并不知道）。</p><h4 id="作用？"><a href="#作用？" class="headerlink" title="作用？"></a>作用？</h4><ul><li>保障应用服务器的安全（增加一层代理，可以屏蔽危险攻击，更方便的控制权限）。</li><li>实现负载均衡。</li><li>实现跨域。<br>配置简单的反向代理：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">        listen       8080;        </span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html; # Nginx默认值</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://localhost:8000; # 反向代理配置，请求会被转发到8000端口</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反向代理简单的模型：</p><img src="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/image.png" class title="你想输入的替代文字"><p>nginx就是充当图中的proxy，左边的3个client在请求时向nginx获取内容，感受不到server存在。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h4 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h4><p>在服务器集群中，Nginx可以将接收到的客户端的请求“均匀地”（可以通过设置权重）分配到这个集群中的所有的服务器上。这个就叫做负载均衡。<br>负载均衡的示意图如下：</p><img src="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/%E8%B4%9F%E8%BD%BD.png" class title="你想输入的替代文字"><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><ul><li>分摊服务器集群压力。</li><li>保证客户端访问的稳定性。</li><li>负载均衡可以解决分摊服务器集群压力的问题。除此之外，Nginx还带有健康检查（服务器心跳检查）功能，会定期轮询向集群里的所有服务器发送健康检查请求，来检查集群中是否有服务器处于异常状态。</li><li>一旦发现某台服务器异常，那么在这以后代理进来的客户端请求都不会被发送到该服务器上（直健康检查发现该服务器已恢复正常），从而保证客户端访问的稳定性。</li></ul><h5 id="配置负载均衡"><a href="#配置负载均衡" class="headerlink" title="配置负载均衡"></a>配置负载均衡</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 负载均衡：设置domain</span><br><span class="line">upstream domain &#123;</span><br><span class="line">    server localhost:8000;</span><br><span class="line">    server localhost:8001;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;  </span><br><span class="line">        listen       8080;        </span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            # root   html; # Nginx默认值</span><br><span class="line">            # index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">            proxy_pass http://domain; # 负载均衡配置，请求会被平均分配到8000和8001端口</span><br><span class="line">            proxy_set_header Host $host:$server_port;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里有两个端口：8000和8001端口，负载均衡成功后访问localhost:8080有时候就会访问到8000端口的页面，有时候也会访问到8001端口的页面。<br>能有这个效果，说明负载均衡策略已经生效了。</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><h4 id="是什么？-2"><a href="#是什么？-2" class="headerlink" title="是什么？"></a>是什么？</h4><p>正向代理跟反向道理正好相反。拿上文中的那个代购例子来讲，多个人找代购购买同一个商品，代购找到买这个的店后一次性给买了。这个过程中，该店主是不知道代购是帮别代买买东西的。那么代购对于多个想买商品的顾客来讲，他就充当了正向代理。<br>意思是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。当你需要把你的服务器作为代理服务器的时候，可以用Nginx来实现正向代理。<br>示意图如下：</p><img src="/2022/03/25/%E5%9C%A8mac%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png" class title="你想输入的替代文字"><p>nginx就充当了图中的proxy，左边的3个 client 在请求时向 nginx 获取内容，server 是感受不到3台 client 存在的<br>科学上网VPN就是一个正向代理工具。</p>]]></content>
      
      
      <categories>
          
          <category> Mac - Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在react中使用history的问题</title>
      <link href="/2022/03/25/%E5%9C%A8react%E4%B8%AD%E4%BD%BF%E7%94%A8history%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/25/%E5%9C%A8react%E4%B8%AD%E4%BD%BF%E7%94%A8history%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><meta name="referrer" content="no-referrer"><h4 id="React中history问题记录"><a href="#React中history问题记录" class="headerlink" title="React中history问题记录"></a>React中history问题记录</h4><h5 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h5><p>在学习react的时候，创建了一个react+ts的项目框架。遇到一个问题，使用history无法进行页面跳转，即使跳转也无法渲染页面。</p><h5 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h5><p>使用以下语法创建了一个简单的项目框架</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app xxx --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure><h4 id="三、history的用法"><a href="#三、history的用法" class="headerlink" title="三、history的用法"></a>三、history的用法</h4><div class="note green icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><ul><li>在react-router很大的程度上依赖history的功能。</li><li>history分为两类：BrowserHistory和HashHistory。分别对应的react-router-dom中的BrowserRouter和HashRouter 两个路由器。</li><li>在react-router很大的程度上依赖history的功能。</li><li>history分为两类：BrowserHistory和HashHistory。分别对应的react-router-dom中的BrowserRouter和HashRouter 两个路由器。</li></ul><h4 id="四、现象"><a href="#四、现象" class="headerlink" title="四、现象"></a>四、现象</h4><p>使用了Router这个路由器，传入history属性，但是在使用createHashHistory 和 createBrowserHistory创建的history时，出现了问题：</p><p><mark>路由发生了改变，页面并没有渲染。</mark></p><h4 id="五、原因"><a href="#五、原因" class="headerlink" title="五、原因"></a>五、原因</h4><p>react-router-dom是基于react-router进行开发的。在网上资料中找到：</p><p><img src="https://img2020.cnblogs.com/blog/1506521/202009/1506521-20200911163244585-439786497.png"></p><h4 id="六、解决方法"><a href="#六、解决方法" class="headerlink" title="六、解决方法"></a>六、解决方法</h4><p>降低history版本，就可以解决无法渲染问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install history@4.1.0 -D</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React - React问题总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> history </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
